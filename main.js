/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => AgentChatPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  apiUrl: "http://127.0.0.1:8001",
  apiKey: "",
  autoConnect: true,
  llmProvider: "ollama",
  llmModel: "qwen3:1.7b",
  llmApiKey: "",
  llmApiBase: "",
  useHybridMode: false,
  localOllamaModel: "qwen3:1.7b"
};
var VIEW_TYPE_AGENT_CHAT = "agent-chat-view";
var AgentChatView = class extends import_obsidian.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.messages = [];
    this.conversationId = null;
    this.isConnected = false;
    this.plugin = plugin;
  }
  setInputText(text) {
    if (this.inputElement) {
      this.inputElement.value = text;
      this.inputElement.focus();
    }
  }
  getViewType() {
    return VIEW_TYPE_AGENT_CHAT;
  }
  getDisplayText() {
    return "Agent Chat";
  }
  getIcon() {
    return "bot";
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    container.addClass("agent-chat-container");
    const headerEl = container.createEl("div", { cls: "agent-chat-header" });
    headerEl.createEl("h3", { text: "Obsidian Agent Chat" });
    const rightContainer = headerEl.createEl("div", { cls: "header-right-container" });
    const settingsBtn = rightContainer.createEl("button", {
      cls: "agent-chat-settings-btn",
      attr: { "aria-label": "\u6253\u5F00\u8BBE\u7F6E" }
    });
    settingsBtn.innerHTML = "\u2699\uFE0F";
    settingsBtn.addEventListener("click", () => {
      this.app.setting.open();
      this.app.setting.openTabById(this.plugin.manifest.id);
    });
    const statusEl = rightContainer.createEl("div", { cls: "agent-chat-status" });
    this.updateConnectionStatus(statusEl);
    this.chatContainer = container.createEl("div", { cls: "agent-chat-messages" });
    const inputContainer = container.createEl("div", { cls: "agent-chat-input-container" });
    this.inputElement = inputContainer.createEl("textarea", {
      cls: "agent-chat-input",
      attr: {
        placeholder: "\u8F93\u5165\u4F60\u7684\u95EE\u9898...",
        rows: "3"
      }
    });
    this.sendButton = inputContainer.createEl("button", {
      cls: "agent-chat-send-btn",
      text: "\u53D1\u9001"
    });
    this.sendButton.addEventListener("click", () => this.sendMessage());
    this.inputElement.addEventListener("keydown", (e) => {
      if (e.key === "Enter" && !e.shiftKey) {
        e.preventDefault();
        this.sendMessage();
      }
    });
    this.setupFileDragAndDrop();
    this.addCurrentDocumentButton(inputContainer);
    await this.testConnection();
    this.addMessage({
      id: "welcome",
      type: "agent",
      content: "\u4F60\u597D\uFF01\u6211\u662F\u4F60\u7684 Obsidian \u667A\u80FD\u52A9\u624B\u3002\u6211\u53EF\u4EE5\u5E2E\u4F60\u7BA1\u7406\u7B14\u8BB0\u3001\u641C\u7D22\u6587\u4EF6\u3001\u56DE\u7B54\u95EE\u9898\u7B49\u3002\u6709\u4EC0\u4E48\u6211\u53EF\u4EE5\u5E2E\u52A9\u4F60\u7684\u5417\uFF1F",
      timestamp: new Date()
    });
  }
  updateConnectionStatus(statusEl) {
    statusEl.empty();
    const indicator = statusEl.createEl("span", {
      cls: `status-indicator ${this.isConnected ? "connected" : "disconnected"}`
    });
    indicator.createEl("span", { cls: "status-dot" });
    indicator.createEl("span", {
      text: this.isConnected ? "\u5DF2\u8FDE\u63A5" : "\u672A\u8FDE\u63A5",
      cls: "status-text"
    });
  }
  async testConnection() {
    try {
      const apiResponse = await fetch(`${this.plugin.settings.apiUrl}/health`);
      if (!apiResponse.ok) {
        this.isConnected = false;
        this.updateConnectionStatusInView();
        return false;
      }
      const healthData = await apiResponse.json();
      this.isConnected = healthData.agent_initialized === true;
      this.updateConnectionStatusInView();
      return this.isConnected;
    } catch (error) {
      this.isConnected = false;
      console.error("\u8FDE\u63A5\u6D4B\u8BD5\u5931\u8D25:", error);
      this.updateConnectionStatusInView();
      return false;
    }
  }
  updateConnectionStatusInView() {
    const statusEl = this.containerEl.querySelector(".agent-chat-status");
    if (statusEl) {
      this.updateConnectionStatus(statusEl);
    }
  }
  async sendMessage() {
    const message = this.inputElement.value.trim();
    if (!message)
      return;
    this.inputElement.value = "";
    const userMessage = {
      id: Date.now().toString(),
      type: "user",
      content: message,
      timestamp: new Date()
    };
    this.addMessage(userMessage);
    const loadingMessage = {
      id: "loading",
      type: "agent",
      content: "\u6B63\u5728\u601D\u8003\u4E2D...",
      timestamp: new Date()
    };
    this.addMessage(loadingMessage);
    try {
      const response = await this.callAgentAPI(message);
      this.removeMessage("loading");
      const agentMessage = {
        id: Date.now().toString(),
        type: "agent",
        content: response.response,
        timestamp: new Date()
      };
      this.addMessage(agentMessage);
      this.conversationId = response.conversation_id;
    } catch (error) {
      this.removeMessage("loading");
      const errorMessage = {
        id: "error",
        type: "agent",
        content: `\u62B1\u6B49\uFF0C\u53D1\u751F\u4E86\u9519\u8BEF\uFF1A${error.message}`,
        timestamp: new Date()
      };
      this.addMessage(errorMessage);
    }
  }
  async callAgentAPI(message) {
    const response = await fetch(`${this.plugin.settings.apiUrl}/chat`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        message,
        conversation_id: this.conversationId
      })
    });
    if (!response.ok) {
      throw new Error(`API \u8BF7\u6C42\u5931\u8D25: ${response.status}`);
    }
    return await response.json();
  }
  addMessage(message) {
    this.messages.push(message);
    this.renderMessage(message);
    this.scrollToBottom();
  }
  removeMessage(id) {
    this.messages = this.messages.filter((msg) => msg.id !== id);
    const messageEl = this.chatContainer.querySelector(`[data-message-id="${id}"]`);
    if (messageEl) {
      messageEl.remove();
    }
  }
  renderMessage(message) {
    const messageEl = this.chatContainer.createEl("div", {
      cls: `agent-chat-message ${message.type}`,
      attr: { "data-message-id": message.id }
    });
    const contentEl = messageEl.createEl("div", { cls: "message-content" });
    const textEl = contentEl.createEl("div", { cls: "message-text" });
    textEl.style.userSelect = "text";
    textEl.style.cursor = "text";
    textEl.style.webkitUserSelect = "text";
    textEl.style.mozUserSelect = "text";
    textEl.style.msUserSelect = "text";
    const formattedContent = this.formatMessageContent(message.content);
    textEl.innerHTML = formattedContent;
    const timeEl = messageEl.createEl("div", {
      cls: "message-time",
      text: message.timestamp.toLocaleTimeString()
    });
  }
  formatMessageContent(content) {
    const escaped = content.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#39;");
    return escaped.replace(/\n/g, "<br>");
  }
  scrollToBottom() {
    this.chatContainer.scrollTop = this.chatContainer.scrollHeight;
  }
  setupFileDragAndDrop() {
    ["dragenter", "dragover", "dragleave", "drop"].forEach((eventName) => {
      this.inputElement.addEventListener(eventName, (e) => {
        e.preventDefault();
        e.stopPropagation();
      });
    });
    this.inputElement.addEventListener("dragenter", () => {
      this.inputElement.classList.add("drag-over");
    });
    this.inputElement.addEventListener("dragleave", () => {
      this.inputElement.classList.remove("drag-over");
    });
    this.inputElement.addEventListener("drop", (e) => {
      var _a;
      this.inputElement.classList.remove("drag-over");
      const files = Array.from(((_a = e.dataTransfer) == null ? void 0 : _a.files) || []);
      if (files.length > 0) {
        const filePaths = files.map((file) => file.path || file.name).join("\n");
        const currentText = this.inputElement.value;
        const newText = currentText ? `${currentText}
\u6587\u4EF6\u8DEF\u5F84:
${filePaths}` : `\u6587\u4EF6\u8DEF\u5F84:
${filePaths}`;
        this.inputElement.value = newText;
        this.inputElement.focus();
      }
    });
  }
  addCurrentDocumentButton(container) {
    const docInfoBtn = container.createEl("button", {
      cls: "agent-chat-doc-info-btn",
      text: "\u{1F4C4}",
      attr: { "aria-label": "\u83B7\u53D6\u5F53\u524D\u6587\u6863\u4FE1\u606F" }
    });
    docInfoBtn.addEventListener("click", () => {
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      if (activeView) {
        const file = activeView.file;
        const editor = activeView.editor;
        const cursor = editor.getCursor();
        const selection = editor.getSelection();
        let docInfo = `\u5F53\u524D\u6587\u6863: ${(file == null ? void 0 : file.path) || "\u672A\u77E5"}`;
        docInfo += `
\u5F53\u524D\u884C: ${cursor.line + 1}`;
        docInfo += `
\u5F53\u524D\u5217: ${cursor.ch + 1}`;
        if (selection) {
          docInfo += `
\u9009\u4E2D\u6587\u672C: "${selection}"`;
        }
        const currentText = this.inputElement.value;
        const newText = currentText ? `${currentText}
${docInfo}` : docInfo;
        this.inputElement.value = newText;
        this.inputElement.focus();
      } else {
        new import_obsidian.Notice("\u5F53\u524D\u6CA1\u6709\u6253\u5F00\u7684Markdown\u6587\u6863");
      }
    });
  }
  async onClose() {
  }
};
var AgentChatSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Agent Chat \u8BBE\u7F6E" });
    containerEl.createEl("h3", { text: "API \u670D\u52A1\u5668\u914D\u7F6E" });
    new import_obsidian.Setting(containerEl).setName("API \u670D\u52A1\u5668\u5730\u5740").setDesc("Agent API \u670D\u52A1\u5668\u7684\u5B8C\u6574 URL").addText((text) => text.setPlaceholder("http://127.0.0.1:8001").setValue(this.plugin.settings.apiUrl).onChange(async (value) => {
      this.plugin.settings.apiUrl = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("API \u5BC6\u94A5").setDesc("\u5982\u679C\u9700\u8981\u7684\u8BDD\uFF0C\u8F93\u5165 API \u5BC6\u94A5").addText((text) => text.setPlaceholder("\u8F93\u5165 API \u5BC6\u94A5").setValue(this.plugin.settings.apiKey).onChange(async (value) => {
      this.plugin.settings.apiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u81EA\u52A8\u8FDE\u63A5").setDesc("\u542F\u52A8\u65F6\u81EA\u52A8\u8FDE\u63A5\u5230 Agent \u670D\u52A1\u5668").addToggle((toggle) => toggle.setValue(this.plugin.settings.autoConnect).onChange(async (value) => {
      this.plugin.settings.autoConnect = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "LLM \u6A21\u578B\u914D\u7F6E" });
    new import_obsidian.Setting(containerEl).setName("LLM \u63D0\u4F9B\u5546").setDesc("\u9009\u62E9\u8981\u4F7F\u7528\u7684 LLM \u63D0\u4F9B\u5546").addDropdown((dropdown) => dropdown.addOption("ollama", "Ollama (\u672C\u5730)").addOption("openai", "OpenAI").addOption("deepseek", "DeepSeek").addOption("gemini", "Google Gemini").addOption("qwen", "Qwen (\u901A\u4E49\u5343\u95EE)").setValue(this.plugin.settings.llmProvider).onChange(async (value) => {
      this.plugin.settings.llmProvider = value;
      await this.plugin.saveSettings();
      this.display();
    }));
    new import_obsidian.Setting(containerEl).setName("\u6A21\u578B\u540D\u79F0").setDesc("\u6307\u5B9A\u8981\u4F7F\u7528\u7684\u6A21\u578B\u540D\u79F0").addText((text) => text.setPlaceholder(this.getModelPlaceholder()).setValue(this.plugin.settings.llmModel).onChange(async (value) => {
      this.plugin.settings.llmModel = value;
      await this.plugin.saveSettings();
    }));
    if (this.plugin.settings.llmProvider !== "ollama") {
      new import_obsidian.Setting(containerEl).setName("API \u5BC6\u94A5").setDesc("LLM \u63D0\u4F9B\u5546\u7684 API \u5BC6\u94A5").addText((text) => text.setPlaceholder("\u8F93\u5165 API \u5BC6\u94A5").setValue(this.plugin.settings.llmApiKey).onChange(async (value) => {
        this.plugin.settings.llmApiKey = value;
        await this.plugin.saveSettings();
      }));
      new import_obsidian.Setting(containerEl).setName("API \u57FA\u7840\u5730\u5740").setDesc("\u81EA\u5B9A\u4E49 API \u57FA\u7840\u5730\u5740\uFF08\u53EF\u9009\uFF09").addText((text) => text.setPlaceholder(this.getApiBasePlaceholder()).setValue(this.plugin.settings.llmApiBase).onChange(async (value) => {
        this.plugin.settings.llmApiBase = value;
        await this.plugin.saveSettings();
      }));
    }
    containerEl.createEl("h3", { text: "\u9AD8\u7EA7\u914D\u7F6E" });
    new import_obsidian.Setting(containerEl).setName("\u6DF7\u5408\u6A21\u5F0F").setDesc("\u4F7F\u7528 API \u6A21\u578B\u8FDB\u884C\u5BF9\u8BDD\uFF0C\u672C\u5730 Ollama \u6A21\u578B\u6267\u884C\u5DE5\u5177\u8C03\u7528").addToggle((toggle) => toggle.setValue(this.plugin.settings.useHybridMode).onChange(async (value) => {
      this.plugin.settings.useHybridMode = value;
      await this.plugin.saveSettings();
      this.display();
    }));
    if (this.plugin.settings.useHybridMode) {
      new import_obsidian.Setting(containerEl).setName("\u672C\u5730\u5DE5\u5177\u6267\u884C\u6A21\u578B").setDesc("\u7528\u4E8E\u6267\u884C\u672C\u5730\u5DE5\u5177\u7684 Ollama \u6A21\u578B").addText((text) => text.setPlaceholder("qwen3:1.7b").setValue(this.plugin.settings.localOllamaModel).onChange(async (value) => {
        this.plugin.settings.localOllamaModel = value;
        await this.plugin.saveSettings();
      }));
    }
    new import_obsidian.Setting(containerEl).setName("\u6D4B\u8BD5\u8FDE\u63A5").setDesc("\u6D4B\u8BD5\u4E0E Agent \u670D\u52A1\u5668\u7684\u8FDE\u63A5").addButton((button) => button.setButtonText("\u6D4B\u8BD5\u8FDE\u63A5").onClick(async () => {
      try {
        const response = await fetch(`${this.plugin.settings.apiUrl}/health`);
        if (response.ok) {
          const data = await response.json();
          if (data.agent_initialized) {
            new import_obsidian.Notice("\u8FDE\u63A5\u6210\u529F\uFF01Agent \u5DF2\u521D\u59CB\u5316");
          } else {
            new import_obsidian.Notice("\u8FDE\u63A5\u6210\u529F\uFF0C\u4F46 Agent \u672A\u521D\u59CB\u5316");
          }
        } else {
          new import_obsidian.Notice("\u8FDE\u63A5\u5931\u8D25\uFF1A\u670D\u52A1\u5668\u54CD\u5E94\u9519\u8BEF");
        }
      } catch (error) {
        new import_obsidian.Notice(`\u8FDE\u63A5\u5931\u8D25\uFF1A${error.message}`);
      }
    }));
    new import_obsidian.Setting(containerEl).setName("\u6D4B\u8BD5 LLM \u8FDE\u63A5").setDesc("\u6D4B\u8BD5\u4E0E\u914D\u7F6E\u7684 LLM \u7684\u8FDE\u63A5").addButton((button) => button.setButtonText("\u6D4B\u8BD5\u8FDE\u63A5").onClick(async () => {
      button.setButtonText("\u6D4B\u8BD5\u4E2D...");
      button.setDisabled(true);
      try {
        const response = await fetch(`${this.plugin.settings.apiUrl}/test-llm`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${this.plugin.settings.apiKey}`
          },
          body: JSON.stringify({
            provider: this.plugin.settings.llmProvider,
            model: this.plugin.settings.llmModel,
            api_key: this.plugin.settings.llmApiKey,
            api_base: this.plugin.settings.llmApiBase
          })
        });
        const result = await response.json();
        if (response.ok && result.success) {
          new import_obsidian.Notice("\u2705 LLM \u8FDE\u63A5\u6210\u529F\uFF01");
        } else {
          new import_obsidian.Notice(`\u274C LLM \u8FDE\u63A5\u5931\u8D25\uFF1A${result.error || "\u672A\u77E5\u9519\u8BEF"}`);
        }
      } catch (error) {
        new import_obsidian.Notice(`\u274C \u8FDE\u63A5\u6D4B\u8BD5\u5931\u8D25\uFF1A${error.message}`);
      } finally {
        button.setButtonText("\u6D4B\u8BD5\u8FDE\u63A5");
        button.setDisabled(false);
      }
    }));
    new import_obsidian.Setting(containerEl).setName("\u91CD\u65B0\u52A0\u8F7D Agent").setDesc("\u4F7F\u7528\u65B0\u914D\u7F6E\u91CD\u65B0\u52A0\u8F7D Agent").addButton((button) => button.setButtonText("\u91CD\u65B0\u52A0\u8F7D").onClick(async () => {
      button.setButtonText("\u91CD\u65B0\u52A0\u8F7D\u4E2D...");
      button.setDisabled(true);
      try {
        const response = await fetch(`${this.plugin.settings.apiUrl}/reload-agent`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${this.plugin.settings.apiKey}`
          },
          body: JSON.stringify({
            provider: this.plugin.settings.llmProvider,
            model: this.plugin.settings.llmModel,
            api_key: this.plugin.settings.llmApiKey,
            api_base: this.plugin.settings.llmApiBase,
            hybrid_mode: this.plugin.settings.useHybridMode
          })
        });
        const result = await response.json();
        if (response.ok && result.success) {
          new import_obsidian.Notice("\u2705 Agent \u91CD\u65B0\u52A0\u8F7D\u6210\u529F\uFF01");
        } else {
          new import_obsidian.Notice(`\u274C Agent \u91CD\u65B0\u52A0\u8F7D\u5931\u8D25\uFF1A${result.error || "\u672A\u77E5\u9519\u8BEF"}`);
        }
      } catch (error) {
        new import_obsidian.Notice(`\u274C \u91CD\u65B0\u52A0\u8F7D\u5931\u8D25\uFF1A${error.message}`);
      } finally {
        button.setButtonText("\u91CD\u65B0\u52A0\u8F7D");
        button.setDisabled(false);
      }
    }));
  }
  getModelPlaceholder() {
    switch (this.plugin.settings.llmProvider) {
      case "ollama":
        return "qwen3:1.7b";
      case "openai":
        return "gpt-4o-mini";
      case "deepseek":
        return "deepseek-chat";
      case "gemini":
        return "gemini-2.0-pro-exp";
      case "qwen":
        return "qwen-plus";
      default:
        return "\u8F93\u5165\u6A21\u578B\u540D\u79F0";
    }
  }
  getApiBasePlaceholder() {
    switch (this.plugin.settings.llmProvider) {
      case "openai":
        return "https://api.openai.com/v1";
      case "deepseek":
        return "https://api.deepseek.com";
      case "gemini":
        return "\u7559\u7A7A\u4F7F\u7528\u9ED8\u8BA4";
      case "qwen":
        return "https://dashscope.aliyuncs.com/api/v1";
      default:
        return "\u8F93\u5165 API \u57FA\u7840\u5730\u5740";
    }
  }
};
var AgentChatPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerView(
      VIEW_TYPE_AGENT_CHAT,
      (leaf) => new AgentChatView(leaf, this)
    );
    this.addRibbonIcon("bot", "Agent Chat", (evt) => {
      this.activateView();
    });
    this.addCommand({
      id: "open-agent-chat",
      name: "\u6253\u5F00 Agent Chat",
      callback: () => {
        this.activateView();
      }
    });
    this.addCommand({
      id: "chat-with-selection",
      name: "\u4E0E\u9009\u4E2D\u6587\u672C\u804A\u5929",
      editorCallback: (editor, view) => {
        const selectedText = editor.getSelection();
        if (selectedText) {
          this.activateViewWithText(selectedText);
        } else {
          new import_obsidian.Notice("\u8BF7\u5148\u9009\u62E9\u4E00\u4E9B\u6587\u672C");
        }
      }
    });
    this.registerEvent(
      this.app.workspace.on("editor-menu", (menu, editor, view) => {
        const selectedText = editor.getSelection();
        menu.addItem((item) => {
          item.setTitle("\u4E0EAgent\u804A\u5929").setIcon("bot").onClick(() => {
            if (selectedText) {
              this.activateViewWithText(selectedText);
            } else {
              this.activateView();
            }
          });
        });
        if (selectedText) {
          menu.addItem((item) => {
            item.setTitle("\u5206\u6790\u9009\u4E2D\u6587\u672C").setIcon("search").onClick(() => {
              const analysisPrompt = `\u8BF7\u5206\u6790\u4EE5\u4E0B\u6587\u672C\u5185\u5BB9\uFF1A

${selectedText}`;
              this.activateViewWithText(analysisPrompt);
            });
          });
        }
        menu.addItem((item) => {
          item.setTitle("\u603B\u7ED3\u5F53\u524D\u6587\u6863").setIcon("file-text").onClick(() => {
            const currentFile = view.file;
            if (currentFile) {
              const content = editor.getValue();
              const summaryPrompt = `\u8BF7\u603B\u7ED3\u4EE5\u4E0B\u6587\u6863\u5185\u5BB9\uFF1A

\u6587\u4EF6\u540D\uFF1A${currentFile.name}

\u5185\u5BB9\uFF1A
${content}`;
              this.activateViewWithText(summaryPrompt);
            }
          });
        });
      })
    );
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        menu.addItem((item) => {
          item.setTitle("\u4E0EAgent\u8BA8\u8BBA\u6B64\u6587\u4EF6").setIcon("bot").onClick(async () => {
            if (file) {
              const content = await this.app.vault.read(file);
              const discussPrompt = `\u6211\u60F3\u8BA8\u8BBA\u8FD9\u4E2A\u6587\u4EF6\uFF1A

\u6587\u4EF6\u540D\uFF1A${file.name}

\u5185\u5BB9\uFF1A
${content}`;
              this.activateViewWithText(discussPrompt);
            }
          });
        });
      })
    );
    this.addSettingTab(new AgentChatSettingTab(this.app, this));
    console.log("Agent Chat \u63D2\u4EF6\u5DF2\u52A0\u8F7D");
  }
  onunload() {
    console.log("Agent Chat \u63D2\u4EF6\u5DF2\u5378\u8F7D");
  }
  async activateView() {
    const { workspace } = this.app;
    let leaf = null;
    const leaves = workspace.getLeavesOfType(VIEW_TYPE_AGENT_CHAT);
    if (leaves.length > 0) {
      leaf = leaves[0];
    } else {
      leaf = workspace.getRightLeaf(false);
      await leaf.setViewState({ type: VIEW_TYPE_AGENT_CHAT, active: true });
    }
    workspace.revealLeaf(leaf);
  }
  async activateViewWithText(text) {
    const { workspace } = this.app;
    let leaf = null;
    const leaves = workspace.getLeavesOfType(VIEW_TYPE_AGENT_CHAT);
    if (leaves.length > 0) {
      leaf = leaves[0];
    } else {
      leaf = workspace.getRightLeaf(false);
      await leaf.setViewState({ type: VIEW_TYPE_AGENT_CHAT, active: true });
    }
    workspace.revealLeaf(leaf);
    const view = leaf.view;
    if (view && view.setInputText) {
      view.setInputText(text);
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
